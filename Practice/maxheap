import matplotlib.pyplot as plt
import networkx as nx

class MaxHeapPriorityQueue:
    def __init__(self):
        self.heap = []

    def reheapup(self, index):
        while index > 0:
            parent_index = (index - 1) // 2
            if self.heap[index] > self.heap[parent_index]:
                self.heap[index], self.heap[parent_index] = self.heap[parent_index], self.heap[index]
                index = parent_index
            else:
                break

    def reheapdown(self, index):
        while (2 * index + 1) < len(self.heap):
            left_child_index = 2 * index + 1
            right_child_index = 2 * index + 2 if (2 * index + 2) < len(self.heap) else left_child_index

            max_child_index = left_child_index if self.heap[left_child_index] > self.heap[right_child_index] else right_child_index

            if self.heap[index] < self.heap[max_child_index]:
                self.heap[index], self.heap[max_child_index] = self.heap[max_child_index], self.heap[index]
                index = max_child_index
            else:
                break

    def enqueue(self, value):
        self.heap.append(value)
        self.reheapup(len(self.heap) - 1)

    def dequeue(self):
        if not self.heap:
            return None

        root = self.heap[0]

        if len(self.heap) > 1:
            self.heap[0] = self.heap.pop()
            self.reheapdown(0)
        else:
            self.heap.pop()

        return root


# Example usage:
priority_queue = MaxHeapPriorityQueue()
priority_queue.enqueue(5)
priority_queue.enqueue(3)
priority_queue.enqueue(8)
priority_queue.enqueue(1)

print("Priority Queue:")
print(priority_queue.heap)

print("Dequeue:", priority_queue.dequeue())
print("Priority Queue after dequeue:")
print(priority_queue.heap)

def heap_to_graph(heap):
    G = nx.DiGraph()

    for i, value in enumerate(heap):
        parent_index = (i - 1) // 2
        if parent_index >= 0:
            G.add_edge(parent_index, i)

    pos = nx.spring_layout(G)  # You can use different layout algorithms

    nx.draw(G, pos, with_labels=True, node_size=700, node_color="skyblue", font_size=8, font_color="black", font_weight="bold")
    plt.show()

heap_to_graph(priority_queue.heap)





